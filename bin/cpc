#!/bin/zsh

# ////////////////////////////////////////////////////////////////
# Globals
# ////////////////////////////////////////////////////////////////

g_script_dir="$(dirname "$0")"
g_src_dir="$(pwd)/src"

g_languages=("cpp")

fzf="$g_script_dir/fzf"

# ////////////////////////////////////////////////////////////////
# Utils
# ////////////////////////////////////////////////////////////////

function lower() { cat - | tr '[:upper:]' '[:lower:]'; }

function regex_match() {
  local pattern="$1" string="$2"
  expr "$string" : "$pattern" >/dev/null
}

function regex_replace() {
  local pattern="$1" replacement="$2" string="$3"
  echo "$string" | sed "s/$pattern/$replacement/"
}

function validate_language() {
  local language="$1"
  [ -n "$language" ] && printf "%s\n" "${g_languages[@]}" | grep -q -E "^$language$"
}

function select_language() {
  printf "%s\n" "${g_languages[@]}" | $fzf
}

# ////////////////////////////////////////////////////////////////
# AtCoder
# ////////////////////////////////////////////////////////////////

function atcoder_get_root_dir() {
  echo "$g_src_dir/atcoder"
}

function atcoder_get_template() {
  local language="$1"
  ! validate_language "$language" && echo "unsupported language: $language" && exit 1
  echo "$(atcoder_get_root_dir)/template.$language"
}

function atcoder_url_pattern() {
  echo '^https:\/\/atcoder.jp\/contests\/\([a-zA-Z0-9_-]*\)\/tasks\/\([a-zA-Z0-9_-]*\)$'
}

function atcoder_url_match() {
  local url="$1"
  regex_match "$(atcoder_url_pattern)" "$url"
}

function atcoder_url_get_contest_id() {
  local url="$1"
  regex_replace "$(atcoder_url_pattern)" "\1" "$url" | lower
}

function atcoder_url_get_task_id() {
  local url="$1"
  regex_replace "$(atcoder_url_pattern)" "\2" "$url" | lower
}

function atcoder_url_get_task_dir() {
  local url="$1"
  local contest_id task_id
  contest_id=$(atcoder_url_get_contest_id "$url")
  task_id=$(atcoder_url_get_task_id "$url")
  echo "$(atcoder_get_root_dir)/$contest_id/$task_id"
}

function atcoder_task_get_testcase_dir() {
  local task_dir="$1"
  echo "$task_dir/test"
}

function atcoder_task_create_new_answer() {
  local task_dir="$1" language="$2"
  local index
  index=$(find "$task_dir" -maxdepth 1 -type f -name "*.$language" | wc -l | awk '{ print $1 }')
  echo "$task_dir/main_$index.$language"
}

function atcoder_task_select_answer() {
  local task_dir="$1"
  find "$task_dir" -maxdepth 1 -type f | $fzf
}

# ////////////////////////////////////////////////////////////////
# Test Runner
# ////////////////////////////////////////////////////////////////

function run_tests() {
  local answer="$1" testcase_dir="$2"

  function run() {
    local command="$1" testcase_dir="$2"

    function judge() {
      local command="$1" input="$2" expected="$3"

      function red() { tput setaf 1; }
      function green() { tput setaf 2; }
      function blue() { tput setaf 5; }
      function nc() { tput sgr0; }

      function cols() { tput cols; }
      function bar() { seq -f "$1" -s "" "$(cols)"; }

      function print_time() { printf "%.3f millisecond" "$1"; }

      function report_ac() {
        local result="$1" runtime="$2"
        bar "-"
        echo "Input:"
        echo "$(cat "$input")"
        echo ""
        echo "Output:"
        echo "$(cat "$result")"
        echo ""
        echo "Status: $(green)AC$(nc)"
        echo "Time:   $(print_time "$runtime")"
        bar "-"
      }

      function report_wa() {
        local result="$1" runtime="$2"
        bar "-"
        echo "Input:"
        echo "$(cat "$input")"
        echo ""
        echo "Output:"
        echo "$(cat "$result")"
        echo ""
        echo "Status: $(red)WA$(nc)"
        echo "Time:   $(print_time "$runtime")"
        bar "-"
      }

      function report_re() {
        bar "-"
        echo "Input:"
        echo "$(cat "$input")"
        echo ""
        echo "Status: $(blue)RE$(nc)"
        bar "-"
      }

      function report_tle() {
        bar "-"
        echo "Input:"
        echo "$(cat "$input")"
        echo ""
        echo "Status: $(blue)TLE$(nc)"
        echo "Time:   > 2000 millisecond"
        bar "-"
      }

      function report_summary() {
        local ok="$1" ng="$2"
        bar "="
        [ $ok -gt 0 ] && echo "$(green)$ok$(nc) passed."
        [ $ng -gt 0 ] && echo "$(red)$ng$(nc) failed."
        bar "="
      }

      local actual
      actual=$(mktemp)
      trap "rm -f $actual" EXIT

      local start end runtime
      start=$(gdate "+%s.%N")
      timeout 2 "$command" <"$input" >"$actual"
      local stat=$?
      end=$(gdate "+%s.%N")
      runtime=$(bc -l <<<"($end - $start) * 1000")
      if [ $stat -eq 124 ]; then
        report_tle && return 1
      elif [ $stat -ne 0 ]; then
        report_re && return 1
      fi

      local result
      result=$(mktemp)
      trap "rm -f $result" EXIT

      if ! sdiff "$expected" "$actual" -w "$(cols)" >"$result"; then
        report_wa "$result" "$runtime" && return 1
      fi

      report_ac "$result" "$runtime" && return 0
    }

    input() { echo "$testcase_dir/sample-$1.in"; }
    expected() { echo "$testcase_dir/sample-$1.out"; }

    local i=1 ok=0 ng=0
    while [ -f "$(input $i)" ] && [ -f "$(expected $i)" ]; do
      if judge "$command" "$(input $i)" "$(expected $i)"; then
        ok=$((ok + 1))
      else
        ng=$((ng + 1))
      fi
      i=$((i + 1))
    done
    report_summary $ok $ng
  }

  function build_cpp() {
    local src="$1" dest="$2"

    local cxx cxxflags
    cxx="/usr/local/bin/g++-9"
    cxxflags=($(cat "$g_script_dir/../compile_flags.txt"))

    $cxx "$src" -o "$dest" ${cxxflags[*]}
  }

  local extension
  extension="${answer##*.}"

  case $extension in
  cpp)
    local dest="${answer%.*}"
    trap "rm -f $dest" EXIT
    if ! build_cpp "$answer" "$dest"; then
      echo "build failed" && exit 1
    fi

    local command="$dest"
    if ! run "$command" "$testcase_dir"; then
      echo "error occurred when running test" && exit 1
    fi
    ;;
  esac
}

# ////////////////////////////////////////////////////////////////
# Commands
# ////////////////////////////////////////////////////////////////

function new_command() {
  function new_atcoder() {
    local url="$1" language="$2"

    if ! validate_language "$language"; then
      language=$(select_language)
    fi

    local task_dir
    task_dir=$(atcoder_url_get_task_dir "$url")
    mkdir -p "$task_dir"

    local template new_answer testcase_dir
    template=$(atcoder_get_template "$language")
    new_answer=$(atcoder_task_create_new_answer "$task_dir" "$language")
    testcase_dir=$(atcoder_task_get_testcase_dir "$task_dir")

    cp "$template" "$new_answer" &&
      oj d "$url" -d "$testcase_dir"
  }

  [ $# -lt 1 ] && echo "too few arguments" && exit 1

  if atcoder_url_match "$1"; then
    new_atcoder "$1" "$2"
  else
    echo "unsupported format: $1" && exit 1
  fi
}

function test_command() {
  function test_atcoder() {
    local url="$1"
    local task_dir answer testcase_dir
    task_dir=$(atcoder_url_get_task_dir "$url")
    answer=$(atcoder_task_select_answer "$task_dir")
    testcase_dir=$(atcoder_task_get_testcase_dir "$task_dir")

    run_tests "$answer" "$testcase_dir"
  }

  function test_local() {
    local task_dir="$1"
    local answer testcase_dir
    task_dir=$(realpath "$task_dir")
    answer=$(atcoder_task_select_answer "$task_dir")
    testcase_dir=$(atcoder_task_get_testcase_dir "$task_dir")

    run_tests "$answer" "$testcase_dir"
  }

  [ $# -lt 1 ] && echo "too few arguments" && exit 1

  if atcoder_url_match "$1"; then
    test_atcoder "$1"
  elif [ -f "$1" ]; then
    test_local "$1"
  else
    echo "unsupported format: $1" && exit 1
  fi
}

function submit_command() {
  function submit_atcoder() {
    local url="$1"
    local task_dir answer
    task_dir=$(atcoder_url_get_task_dir "$url")
    answer=$(atcoder_task_select_answer "$task_dir")

    oj s "$url" "$answer" -y
  }

  [ $# -lt 1 ] && echo "too few arguments" && exit 1

  if atcoder_url_match "$1"; then
    submit_atcoder "$1"
  else
    echo "unsupported format: $1" && exit 1
  fi
}

# ////////////////////////////////////////////////////////////////
# Main
# ////////////////////////////////////////////////////////////////

case "$1" in
n | new) shift && new_command "$@" && exit 0 ;;
t | test) shift && test_command "$@" && exit 0 ;;
s | submit) shift && submit_command "$@" && exit 0 ;;
*) echo "unknown command: $1" && exit 1 ;;
esac
